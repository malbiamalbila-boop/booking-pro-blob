import { NextResponse } from "next/server"; import { query } from "../../../lib/db"; export const runtime="nodejs";
export async function GET(req:Request){ const {searchParams}=new URL(req.url); const vehicleId=searchParams.get("vehicleId"); const from=searchParams.get("from"); const to=searchParams.get("to"); const params:any[]=[]; let sql=`select b.*, v.display_name, c.full_name from bookings b join vehicles v on v.id=b.vehicle_id left join customers c on c.id=b.customer_id where 1=1`; if(vehicleId){ params.push(vehicleId); sql+=` and b.vehicle_id = $${params.length}`;} if(from){ params.push(from); sql+=` and b.ends_at > $${params.length}`;} if(to){ params.push(to); sql+=` and b.starts_at < $${params.length}`;} sql+=" order by b.starts_at asc"; const {rows}=await query(sql,params); return NextResponse.json(rows);} 
export async function POST(req:Request){ const b=await req.json(); const {vehicle_id,customer_id,starts_at,ends_at,pickup_location,return_location,price_bam,insurance,notes}=b; if(!vehicle_id||!starts_at||!ends_at) return NextResponse.json({error:"vehicle_id, starts_at, ends_at required"},{status:400}); try{ const {rows}=await query(`insert into bookings( vehicle_id, customer_id, starts_at, ends_at, pickup_location, return_location, price_bam, insurance, notes ) values ($1,$2,$3,$4,$5,$6,$7,$8,$9) returning *`, [vehicle_id,customer_id||null,starts_at,ends_at,pickup_location||null,return_location||null,price_bam||null,insurance||null,notes||null]); return NextResponse.json(rows[0],{status:201}); }catch(e:any){ const msg=String(e?.message||""); if(e?.code==="23P01"||msg.includes("no_overlap_per_vehicle")) return NextResponse.json({error:"Vehicle already booked in this time range."},{status:409}); console.error(e); return NextResponse.json({error:"Internal error"},{status:500}); } }
export async function PATCH(req:Request){ const b=await req.json(); const {id, ...updates}=b; if(!id) return NextResponse.json({error:"id required"},{status:400}); const fields=["starts_at","ends_at","status","odometer_out","odometer_in","fuel_out","fuel_in","notes","price_bam"]; const sets:string[]=[]; const params:any[]=[]; fields.forEach(f=>{ if(f in updates){ params.push((updates as any)[f]); sets.push(`${f} = $${params.length}`); } }); if(!sets.length) return NextResponse.json({ok:true}); params.push(id); try{ const {rows}=await query(`update bookings set ${sets.join(", ")} where id=$${params.length} returning *`, params); return NextResponse.json(rows[0]); }catch(e:any){ const msg=String(e?.message||""); if(e?.code==="23P01"||msg.includes("no_overlap_per_vehicle")) return NextResponse.json({error:"Vehicle already booked in this time range."},{status:409}); console.error(e); return NextResponse.json({error:"Internal error"},{status:500}); } }
export async function DELETE(req:Request){ const {searchParams}=new URL(req.url); const id=searchParams.get("id"); if(!id) return NextResponse.json({error:"id required"},{status:400}); await query("delete from bookings where id=$1",[id]); return NextResponse.json({ok:true}); }
